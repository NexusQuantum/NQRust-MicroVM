openapi: 3.0.3
info:
  title: manager
  description: ''
  license:
    name: ''
  version: 0.1.0
paths:
  /v1/functions:
    get:
      tags:
      - Functions
      operationId: list
      responses:
        '200':
          description: Functions listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsResp'
        '500':
          description: Failed to list functions
    post:
      tags:
      - Functions
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionReq'
        required: true
      responses:
        '200':
          description: Function created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFunctionResp'
        '400':
          description: Invalid request
        '500':
          description: Failed to create function
  /v1/functions/{id}:
    get:
      tags:
      - Functions
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Function fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctionResp'
        '404':
          description: Function not found
        '500':
          description: Failed to fetch function
    put:
      tags:
      - Functions
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionReq'
        required: true
      responses:
        '200':
          description: Function updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctionResp'
        '404':
          description: Function not found
        '500':
          description: Failed to update function
    delete:
      tags:
      - Functions
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Function deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: Function not found
        '500':
          description: Failed to delete function
  /v1/functions/{id}/invoke:
    post:
      tags:
      - Functions
      operationId: invoke
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeFunctionReq'
        required: true
      responses:
        '200':
          description: Function invoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResp'
        '404':
          description: Function not found
        '500':
          description: Failed to invoke function
  /v1/functions/{id}/logs:
    get:
      tags:
      - Functions
      operationId: logs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: status
        in: path
        required: true
        schema:
          type: string
          nullable: true
      - name: limit
        in: path
        required: true
        schema:
          type: integer
          format: int64
          nullable: true
      responses:
        '200':
          description: Invocation logs fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvocationsResp'
        '404':
          description: Function not found
        '500':
          description: Failed to fetch logs
  /v1/hosts/register:
    post:
      tags:
      - Hosts
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterHostRequest'
        required: true
      responses:
        '200':
          description: Host registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterHostResponse'
        '500':
          description: Failed to register host
  /v1/hosts/{id}/heartbeat:
    post:
      tags:
      - Hosts
      operationId: heartbeat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostHeartbeatRequest'
        required: true
      responses:
        '200':
          description: Heartbeat recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: Host not found
        '500':
          description: Failed to record heartbeat
  /v1/images:
    get:
      tags:
      - Images
      operationId: list
      parameters:
      - name: kind
        in: path
        required: true
        schema:
          type: string
          nullable: true
      - name: project
        in: path
        required: true
        schema:
          type: string
          nullable: true
      - name: name
        in: path
        required: true
        schema:
          type: string
          nullable: true
      responses:
        '200':
          description: Images listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImagesResp'
        '500':
          description: Failed to list images
    post:
      tags:
      - Images
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageReq'
        required: true
      responses:
        '200':
          description: Image registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageResp'
        '400':
          description: Invalid image path
        '500':
          description: Failed to store image metadata
  /v1/images/{id}:
    get:
      tags:
      - Images
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Image fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImageResp'
        '404':
          description: Image not found
        '500':
          description: Failed to fetch image
    delete:
      tags:
      - Images
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Image deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: Image not found
        '500':
          description: Failed to delete image
  /v1/logs/tail:
    get:
      tags:
      - Logs
      summary: Super simple file read (dev only). Frontend can poll.
      operationId: tail_once
      parameters:
      - name: path
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Log tailed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TailLogResponse'
  /v1/snapshots/{id}:
    get:
      tags:
      - Snapshots
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Snapshot fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSnapshotResponse'
        '404':
          description: Snapshot not found
  /v1/snapshots/{id}/instantiate:
    post:
      tags:
      - Snapshots
      operationId: instantiate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Optional overrides when instantiating a snapshot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateSnapshotReq'
        required: true
      responses:
        '200':
          description: Snapshot instantiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantiateSnapshotResp'
        '404':
          description: Snapshot not found
        '502':
          description: Failed to instantiate snapshot
  /v1/templates:
    get:
      tags:
      - Templates
      operationId: list
      responses:
        '200':
          description: Templates listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTemplatesResp'
        '500':
          description: Failed to list templates
    post:
      tags:
      - Templates
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateReq'
        required: true
      responses:
        '200':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTemplateResp'
        '500':
          description: Failed to create template
  /v1/templates/{id}:
    get:
      tags:
      - Templates
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Template fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemplateResp'
        '404':
          description: Template not found
        '500':
          description: Failed to fetch template
  /v1/templates/{id}/instantiate:
    post:
      tags:
      - Templates
      operationId: instantiate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateTemplateReq'
        required: true
      responses:
        '200':
          description: Template instantiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantiateTemplateResp'
        '404':
          description: Template not found
        '500':
          description: Failed to instantiate template
  /v1/vms:
    get:
      tags:
      - VMs
      operationId: list
      responses:
        '200':
          description: VMs listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVmsResponse'
        '500':
          description: Failed to list VMs
    post:
      tags:
      - VMs
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVmReq'
        required: true
      responses:
        '200':
          description: VM created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVmResponse'
        '500':
          description: Failed to create VM
  /v1/vms/{id}:
    get:
      tags:
      - VMs
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: VM fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmResponse'
        '404':
          description: VM not found
        '500':
          description: Failed to fetch VM
    delete:
      tags:
      - VMs
      operationId: delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: VM deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '500':
          description: Failed to delete VM
  /v1/vms/{id}/balloon:
    put:
      tags:
      - VM configuration
      operationId: put_balloon
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalloonConfig'
        required: true
      responses:
        '200':
          description: Balloon configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
    patch:
      tags:
      - VM configuration
      operationId: patch_balloon
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalloonConfig'
        required: true
      responses:
        '200':
          description: Balloon updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
  /v1/vms/{id}/balloon/statistics:
    patch:
      tags:
      - VM configuration
      operationId: patch_balloon_statistics
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalloonStatsConfig'
        required: true
      responses:
        '200':
          description: Balloon stats updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
  /v1/vms/{id}/ctrl-alt-del:
    post:
      tags:
      - VMs
      operationId: ctrl_alt_del
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Ctrl-Alt-Del sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: VM must be running
        '404':
          description: VM not found
        '500':
          description: Failed to send Ctrl-Alt-Del
  /v1/vms/{id}/drives:
    get:
      tags:
      - VM devices
      operationId: list_drives
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Drives listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDrivesResponse'
    post:
      tags:
      - VM devices
      operationId: create_drive
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriveReq'
        required: true
      responses:
        '200':
          description: Drive created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDrive'
        '404':
          description: VM not found
  /v1/vms/{id}/drives/{drive_id}:
    get:
      tags:
      - VM devices
      operationId: get_drive
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: drive_id
        in: path
        description: Drive record ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Drive fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDrive'
        '404':
          description: Drive not found
    delete:
      tags:
      - VM devices
      operationId: delete_drive
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: drive_id
        in: path
        description: Drive record ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Drive deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: Invalid request
        '404':
          description: Drive not found
    patch:
      tags:
      - VM devices
      operationId: update_drive
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: drive_id
        in: path
        description: Drive record ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriveReq'
        required: true
      responses:
        '200':
          description: Drive updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDrive'
        '400':
          description: Invalid request
        '404':
          description: Drive not found
  /v1/vms/{id}/entropy:
    put:
      tags:
      - VM configuration
      operationId: put_entropy
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntropyConfigReq'
        required: true
      responses:
        '200':
          description: Entropy device configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
  /v1/vms/{id}/flush-metrics:
    post:
      tags:
      - VMs
      operationId: flush_metrics
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Metrics flushed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
        '500':
          description: Failed to flush metrics
  /v1/vms/{id}/logger:
    put:
      tags:
      - VM configuration
      operationId: put_logger
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoggerUpdateReq'
        required: true
      responses:
        '200':
          description: Logger updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
  /v1/vms/{id}/nics:
    get:
      tags:
      - VM devices
      operationId: list_nics
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: NICs listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNicsResponse'
    post:
      tags:
      - VM devices
      operationId: create_nic
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNicReq'
        required: true
      responses:
        '200':
          description: NIC created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmNic'
        '404':
          description: VM not found
  /v1/vms/{id}/nics/{nic_id}:
    get:
      tags:
      - VM devices
      operationId: get_nic
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: nic_id
        in: path
        description: NIC record ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: NIC fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmNic'
        '404':
          description: NIC not found
    delete:
      tags:
      - VM devices
      operationId: delete_nic
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: nic_id
        in: path
        description: NIC record ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: NIC deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: Invalid request
        '404':
          description: NIC not found
    patch:
      tags:
      - VM devices
      operationId: update_nic
      parameters:
      - name: id
        in: path
        description: VM ID
        required: true
        schema:
          type: string
          format: uuid
      - name: nic_id
        in: path
        description: NIC record ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNicReq'
        required: true
      responses:
        '200':
          description: NIC updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmNic'
        '400':
          description: Invalid request
        '404':
          description: NIC not found
  /v1/vms/{id}/pause:
    post:
      tags:
      - VMs
      operationId: pause
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: VM paused
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: VM must be running to pause
        '404':
          description: VM not found
        '500':
          description: Failed to pause VM
  /v1/vms/{id}/resume:
    post:
      tags:
      - VMs
      operationId: resume
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: VM resumed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '400':
          description: VM must be paused to resume
        '404':
          description: VM not found
        '500':
          description: Failed to resume VM
  /v1/vms/{id}/serial:
    put:
      tags:
      - VM configuration
      operationId: put_serial
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SerialConfigReq'
        required: true
      responses:
        '200':
          description: Serial device configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '404':
          description: VM not found
  /v1/vms/{id}/snapshots:
    get:
      tags:
      - Snapshots
      operationId: list_for_vm
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Snapshots listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSnapshotsResponse'
        '500':
          description: Failed to list snapshots
    post:
      tags:
      - Snapshots
      operationId: create
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Optional agent snapshot configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
        required: true
      responses:
        '200':
          description: Snapshot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
        '404':
          description: VM not found
        '500':
          description: Failed to record snapshot
        '502':
          description: Agent interaction failed
  /v1/vms/{id}/stop:
    post:
      tags:
      - VMs
      operationId: stop
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: VM stopped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '500':
          description: Failed to stop VM
components:
  schemas:
    BalloonConfig:
      type: object
      required:
      - amount_mib
      - deflate_on_oom
      properties:
        amount_mib:
          type: integer
          format: int64
          minimum: 0
        deflate_on_oom:
          type: boolean
        stats_polling_interval_s:
          type: integer
          format: int64
          nullable: true
          minimum: 0
    BalloonStatsConfig:
      type: object
      properties:
        stats_polling_interval_s:
          type: integer
          format: int64
          nullable: true
          minimum: 0
    CreateDriveReq:
      type: object
      required:
      - drive_id
      properties:
        cache_type:
          type: string
          nullable: true
        drive_id:
          type: string
        io_engine:
          type: string
          nullable: true
        is_read_only:
          type: boolean
        is_root_device:
          type: boolean
        path_on_host:
          type: string
          nullable: true
        rate_limiter:
          nullable: true
        size_bytes:
          type: integer
          format: int64
          nullable: true
          minimum: 0
    CreateFunctionReq:
      type: object
      required:
      - name
      - runtime
      - code
      - handler
      properties:
        code:
          type: string
        env_vars:
          nullable: true
        handler:
          type: string
        memory_mb:
          type: integer
          format: int32
        name:
          type: string
        runtime:
          type: string
        timeout_seconds:
          type: integer
          format: int32
        vcpu:
          type: integer
          format: int32
    CreateFunctionResp:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    CreateImageReq:
      type: object
      required:
      - kind
      - name
      - host_path
      - sha256
      - size
      properties:
        host_path:
          type: string
        kind:
          type: string
        name:
          type: string
        project:
          type: string
          nullable: true
        sha256:
          type: string
        size:
          type: integer
          format: int64
    CreateImageResp:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    CreateNicReq:
      type: object
      required:
      - iface_id
      - host_dev_name
      properties:
        guest_mac:
          type: string
          nullable: true
        host_dev_name:
          type: string
        iface_id:
          type: string
        rx_rate_limiter:
          nullable: true
        tx_rate_limiter:
          nullable: true
    CreateSnapshotRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        parent_id:
          type: string
          format: uuid
          nullable: true
        snapshot_type:
          type: string
          nullable: true
        track_dirty_pages:
          type: boolean
          nullable: true
    CreateSnapshotResponse:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
    CreateTemplateReq:
      type: object
      required:
      - name
      - spec
      properties:
        name:
          type: string
        spec:
          $ref: '#/components/schemas/TemplateSpec'
    CreateTemplateResp:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    CreateVmReq:
      type: object
      required:
      - name
      - vcpu
      - mem_mib
      properties:
        kernel_image_id:
          type: string
          format: uuid
          nullable: true
        kernel_path:
          type: string
          nullable: true
        mem_mib:
          type: integer
          format: int32
          minimum: 0
        name:
          type: string
        password:
          type: string
          nullable: true
        rootfs_image_id:
          type: string
          format: uuid
          nullable: true
        rootfs_path:
          type: string
          nullable: true
        source_snapshot_id:
          type: string
          format: uuid
          nullable: true
        username:
          type: string
          nullable: true
        vcpu:
          type: integer
          format: int32
          minimum: 0
    CreateVmResponse:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    Function:
      type: object
      required:
      - id
      - name
      - runtime
      - code
      - handler
      - timeout_seconds
      - memory_mb
      - vcpu
      - port
      - state
      - created_at
      - updated_at
      properties:
        code:
          type: string
        created_at:
          type: string
          format: date-time
        env_vars:
          nullable: true
        guest_ip:
          type: string
          nullable: true
        handler:
          type: string
        id:
          type: string
          format: uuid
        last_invoked_at:
          type: string
          format: date-time
          nullable: true
        memory_mb:
          type: integer
          format: int32
        name:
          type: string
        port:
          type: integer
          format: int32
        runtime:
          type: string
        state:
          type: string
        timeout_seconds:
          type: integer
          format: int32
        updated_at:
          type: string
          format: date-time
        vcpu:
          type: integer
          format: int32
        vm_id:
          type: string
          format: uuid
          nullable: true
    FunctionInvocation:
      type: object
      required:
      - id
      - function_id
      - status
      - duration_ms
      - request_id
      - event
      - invoked_at
      properties:
        duration_ms:
          type: integer
          format: int64
        error:
          type: string
          nullable: true
        event: {}
        function_id:
          type: string
          format: uuid
        id:
          type: string
          format: uuid
        invoked_at:
          type: string
          format: date-time
        logs:
          type: array
          items:
            type: string
        memory_used_mb:
          type: integer
          format: int32
          nullable: true
        request_id:
          type: string
        response:
          nullable: true
        status:
          type: string
    GetFunctionResp:
      type: object
      required:
      - item
      properties:
        item:
          $ref: '#/components/schemas/Function'
    GetImageResp:
      type: object
      required:
      - item
      properties:
        item:
          $ref: '#/components/schemas/Image'
    GetSnapshotResponse:
      type: object
      required:
      - item
      properties:
        item:
          $ref: '#/components/schemas/Snapshot'
    GetTemplateResp:
      type: object
      required:
      - item
      properties:
        item:
          $ref: '#/components/schemas/Template'
    GetVmResponse:
      type: object
      required:
      - item
      properties:
        item:
          $ref: '#/components/schemas/Vm'
    HostHeartbeatRequest:
      type: object
      properties:
        capabilities:
          nullable: true
    Image:
      type: object
      required:
      - id
      - kind
      - name
      - host_path
      - sha256
      - size
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        host_path:
          type: string
        id:
          type: string
          format: uuid
        kind:
          type: string
        name:
          type: string
        project:
          type: string
          nullable: true
        sha256:
          type: string
        size:
          type: integer
          format: int64
        updated_at:
          type: string
          format: date-time
    InstantiateSnapshotReq:
      type: object
      properties:
        name:
          type: string
          nullable: true
    InstantiateSnapshotResp:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    InstantiateTemplateReq:
      type: object
      required:
      - name
      properties:
        name:
          type: string
    InstantiateTemplateResp:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    InvokeFunctionReq:
      type: object
      required:
      - event
      properties:
        event: {}
    InvokeFunctionResp:
      type: object
      required:
      - request_id
      - status
      - duration_ms
      properties:
        duration_ms:
          type: integer
          format: int64
        error:
          type: string
          nullable: true
        logs:
          type: array
          items:
            type: string
        request_id:
          type: string
        response:
          nullable: true
        status:
          type: string
    ListDrivesResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/VmDrive'
    ListFunctionsResp:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Function'
    ListImagesResp:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    ListInvocationsResp:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FunctionInvocation'
    ListNicsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/VmNic'
    ListSnapshotsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Snapshot'
    ListTemplatesResp:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Template'
    ListVmsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Vm'
    LoggerUpdateReq:
      type: object
      properties:
        level:
          type: string
          nullable: true
        log_path:
          type: string
          nullable: true
        module:
          type: string
          nullable: true
        show_level:
          type: boolean
          nullable: true
        show_log_origin:
          type: boolean
          nullable: true
    OkResponse:
      type: object
      required:
      - ok
      properties:
        ok:
          type: boolean
    RegisterHostRequest:
      type: object
      required:
      - name
      - addr
      properties:
        addr:
          type: string
        capabilities: {}
        name:
          type: string
    RegisterHostResponse:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    Snapshot:
      type: object
      required:
      - id
      - vm_id
      - snapshot_path
      - mem_path
      - size_bytes
      - state
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        mem_path:
          type: string
        name:
          type: string
          nullable: true
        parent_id:
          type: string
          format: uuid
          nullable: true
        size_bytes:
          type: integer
          format: int64
        snapshot_path:
          type: string
        snapshot_type:
          type: string
          nullable: true
        state:
          type: string
        track_dirty_pages:
          type: boolean
        updated_at:
          type: string
          format: date-time
        vm_id:
          type: string
          format: uuid
    TailLogResponse:
      type: object
      required:
      - text
      properties:
        text:
          type: string
    TemplateSpec:
      type: object
      required:
      - vcpu
      - mem_mib
      properties:
        kernel_image_id:
          type: string
          format: uuid
          nullable: true
        kernel_path:
          type: string
          nullable: true
        mem_mib:
          type: integer
          format: int32
          minimum: 0
        rootfs_image_id:
          type: string
          format: uuid
          nullable: true
        rootfs_path:
          type: string
          nullable: true
        vcpu:
          type: integer
          format: int32
          minimum: 0
    UpdateDriveReq:
      type: object
      properties:
        path_on_host:
          type: string
          nullable: true
        rate_limiter:
          nullable: true
    UpdateFunctionReq:
      type: object
      properties:
        code:
          type: string
          nullable: true
        env_vars:
          nullable: true
        handler:
          type: string
          nullable: true
        memory_mb:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
        runtime:
          type: string
          nullable: true
        timeout_seconds:
          type: integer
          format: int32
          nullable: true
    UpdateNicReq:
      type: object
      properties:
        rx_rate_limiter:
          nullable: true
        tx_rate_limiter:
          nullable: true
    Vm:
      type: object
      required:
      - id
      - name
      - state
      - host_id
      - host_addr
      - api_sock
      - tap
      - log_path
      - http_port
      - fc_unit
      - vcpu
      - mem_mib
      - kernel_path
      - rootfs_path
      - created_at
      - updated_at
      properties:
        api_sock:
          type: string
        created_at:
          type: string
          format: date-time
        fc_unit:
          type: string
        host_addr:
          type: string
        host_id:
          type: string
          format: uuid
        http_port:
          type: integer
          format: int32
        id:
          type: string
          format: uuid
        kernel_path:
          type: string
        log_path:
          type: string
        mem_mib:
          type: integer
          format: int32
        name:
          type: string
        rootfs_path:
          type: string
        source_snapshot_id:
          type: string
          format: uuid
          nullable: true
        state:
          type: string
        tap:
          type: string
        template_id:
          type: string
          format: uuid
          nullable: true
        updated_at:
          type: string
          format: date-time
        vcpu:
          type: integer
          format: int32
    VmDrive:
      type: object
      required:
      - id
      - vm_id
      - drive_id
      - path_on_host
      - is_root_device
      - is_read_only
      - created_at
      - updated_at
      properties:
        cache_type:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        drive_id:
          type: string
        id:
          type: string
          format: uuid
        io_engine:
          type: string
          nullable: true
        is_read_only:
          type: boolean
        is_root_device:
          type: boolean
        path_on_host:
          type: string
        rate_limiter:
          nullable: true
        size_bytes:
          type: integer
          format: int64
          nullable: true
        updated_at:
          type: string
          format: date-time
        vm_id:
          type: string
          format: uuid
    VmNic:
      type: object
      required:
      - id
      - vm_id
      - iface_id
      - host_dev_name
      - created_at
      - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        guest_mac:
          type: string
          nullable: true
        host_dev_name:
          type: string
        id:
          type: string
          format: uuid
        iface_id:
          type: string
        rx_rate_limiter:
          nullable: true
        tx_rate_limiter:
          nullable: true
        updated_at:
          type: string
          format: date-time
        vm_id:
          type: string
          format: uuid
tags:
- name: Hosts
  description: Host lifecycle operations.
- name: Templates
  description: Template management APIs.
- name: VMs
  description: Virtual machine lifecycle APIs.
- name: Images
  description: Image registry APIs.
- name: Snapshots
  description: Snapshot management APIs.
- name: Functions
  description: Serverless function management APIs.
- name: Logs
  description: Development log utilities.
- name: VM devices
  description: Block and network device management.
